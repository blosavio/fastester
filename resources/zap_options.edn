{:title "`zap` example"

 :responsible {:name "Brad Losavio"
               :email "blosavio@sagevisuals.com"}

 :copyright-holder "Brad Losavio"

 :fastester-UUID #uuid "3615ae1c-d196-4cb0-bb4c-b4f29a8e2501"

 :preferred-version-info :lein

 :benchmarks {'zap.benchmarks #{'zap-inc
                                'zap-uc}}
 
 ;; output directories and filenames
 :html-directory "doc/"
 :html-filename "zap_performance.html"
 :img-subdirectory "zap_img/"

 :markdown-directory "doc/"
 :markdown-filename "zap_performance.md"

 :results-url "https://github.com/blosavio/fastester/blob/main/"
 :results-directory "resources/zap_performance/"

 :verbose? true
 :testing-thoroughness :quick
 :parallel? false
 :save-benchmark-fn-results? false

 :sort-comparator #(> (Integer/parseInt %1) (Integer/parseInt %2))

 :tidy-html? true

 :preamble [:div
            [:p "This page follows the "
             [:code "zap"]
             " function benchmark example from the "
             [:a {:href "https://github.com/blosavio/fastester"}
              "Fastester ReadMe"]
             ". The benchmarks are defined in "
             [:a {:href "https://github.com/blosavio/fastester/blob/main/test/zap/benchmarks.clj"}
              "this file"]
             ", while the options (including this very text you are now reading)
 are defined in "
             [:a {:href "https://github.com/blosavio/fastester/blob/main/resources/zap_options.edn"}
              "this file"]
             ". To generate this "
             [:span.small-caps "html"]
             " page, evaluate Fastester's "
             [:a {:href "https://blosavio.github.io/fastester/fastester.core.html#var--main"}
              [:code "main"]]
             " function with the "
             [:code ":documents"]
             " argument. For example, with Leiningen, run this."]
            
            [:pre
             [:code "$ lein run -m fastester.core :documents zap_options.edn"]]

            [:p "The hyperlink immediately preceding this preamble ('faster
 `zap` implementation') is a one-element table of contents. Clicking that link
 whisks us to the "
             [:span.small-caps "html"]
             " section for that benchmark "
             [:em "group"]
             " name. In a performance document like this one with only one
 group, it's not terribly useful. Real life documents will have multiple
 groups with longer sections and that table of contents will provide some handy
 navigation. Try clicking the link; it will scroll us only to the immediate next
 section."]]

 :comments
 {"faster `zap` implementation"
  [:div
   [:p "This is the comments section for our single benchmark "
    [:em "group"]
    ", 'faster `zap` implementation'. We designated two benchmarks to that
 group, "
    [:code "zap-inc"]
    " and "
    [:code "zap-uc"]
    ". We don't see those names here because they are merely bookkeeping and not
 relevant for communicating the performance changes between version 11 and
 version 12."]
   
   [:p "What we "
    [:strong "can"]
    " see are the actual benchmark function expressions that were measured by
 Criterium, i.e., the "
    [:code "doall/zap"]
    " expressions. We defined two benchmarks, and after running the benchmarks
 and generating the documents, we see two charts summarizing the results."]

   [:p "We simulated a performance improvement from version 11 to version 12 by
 giving the older version more work to do at each step. In both charts, all of
 version 12's data points are lower, i.e., shorter evaluation times, than
 version 11's respective data points, across the full range of argument sequence
 lengths (which span one element to ten-thousand elements). Given this, in the
 release notes, we might say:"]

   [:blockquote
    [:em "The new implementation of "
     [:code "zap"]
     " offers more than 25% speedup across four orders of magnitude input length
 for processing both integers and strings."]]

   [:p "This page merely shows an example. Actual performance reports ought to
 involve a wider span of inputs, and additional benchmarks to cover the majority
 of common use cases."]]}

 :chart-settings
 {"(fn [n] (doall (zap inc (range-of-length-n n))))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? true}

  "(fn [i] (doall (zap str/upper-case (abc-cycle-of-length-i i))))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? true}}}

