{:project-formatted-name "Fastester"

 :responsible {:name "Brad Losavio"
               :email "blosavio@sagevisuals.com"}

 :copyright-holder "Brad Losavio"

 :perflog-UUID #uuid "50c7eada-f96d-41bf-aed0-47d386e61136"

 ;; source directories and filenames
 :tests-directory "test/fastester/performance/"
 :tests-filename "tests.clj"

 ;; output directories and filenames
 :html-directory "doc/"
 :html-filename "performance.html"
 :img-subdirectory "img/"

 :markdown-directory "doc/"
 :markdown-filename "performance.md"

 :results-directory "resources/performance_entries/"

 :excludes #{"test-name to skip"
             "mapping stuff"
             "custom `conj`"
             "plus, vary number of digits in args"
             "plus, vary number of operands"}

 :verbose? true
 :testing-thoroughness :quick
 :parallel? true

 :tidy-html? true

 :preamble [:div
            [:p "Preamble comments..."]

            [:pre [:code "(+ 1 2) ;; => 3"]]

            [:p "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]]

 :comments
 {"mapping stuff"
  [:p "Note: Skipped version 5..."]

  "plus, vary number of digits in args"
  [:p "Plus vary args comments..."]

  "plus, vary number of operands"
  [:p "Note: Added this test starting with version 4"]

  "custom `conj`"
  [:p "Version 6 implemented `conj` with transients, so should be faster..."]}

 :chart-settings
 {"(fn [n] (delayed-+ n n n))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (delayed-+ n n))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (delayed-+ n))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (apply + (take n (repeat 64))))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (my-conj (vec (repeatedly n (fn* [] (rand-int 99)))) :tail-value))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (map inc (range n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (map str/upper-case (take n (cycle [\"a\" \"b\" \"c\"]))))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}}}

