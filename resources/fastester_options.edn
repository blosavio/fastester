{:project-formatted-name "Fastester"

 :responsible {:name "Brad Losavio"
               :email "blosavio@sagevisuals.com"}

 :copyright-holder "Brad Losavio"

 :fastester-UUID #uuid "50c7eada-f96d-41bf-aed0-47d386e61136"

 :preferred-version-info :lein

 :benchmarks {'fastester.performance.benchmarks
              #{'add-1-arg
                'add-2-arg
                'add-3-arg
                'add-many-args
                'conj-onto-rands}
              
              'fastester.performance.benchmarks-mapping
              #{'map-inc-across-a-sequence
                'map-UC-over-a-cycle}}
 
 ;; output directories and filenames
 :html-directory "doc/"
 :html-filename "performance.html"
 :img-subdirectory "img/"

 :markdown-directory "doc/"
 :markdown-filename "performance.md"

 :results-url "https://github.com/blosavio/fastester/blob/main/"
 :results-directory "resources/performance_entries/"

 :verbose? true
 :testing-thoroughness :quick
 :parallel? false
 :save-benchmark-fn-results? false

 :sort-comparator #(> (Integer/parseInt %1) (Integer/parseInt %2))

 :tidy-html? true

 :preamble [:div
            [:p "Preamble comments..."]

            [:pre [:code "(+ 1 2) ;; => 3"]]

            [:p "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."]]

 :comments
 {"mapping stuff"
  [:p "Note: Skipped version 5..."]

  "plus, vary number of digits in args"
  [:p "Plus vary args comments..."]

  "plus, vary number of operands"
  [:p "Note: Added this test starting with version 4"]

  "custom `conj`"
  [:p "Version 6 implemented `conj` with transients, so should be faster..."]}

 :chart-settings
 {"(fn [n] (delayed-+ n n n))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (delayed-+ n n))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (delayed-+ n))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (apply + (seq-of-n-repeats n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? true}

  "(fn [n] (my-conj (seq-of-n-rand-ints n) :tail-value))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? true}

  "(fn [n] (doall (map inc (range-of-length-n n))))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? true}

  "(fn [n] (doall (map str/upper-case (abc-cycle-of-length-n n))))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? true}}}

